var app=angular.module("app",[]);angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(n,o){t.currentUser=o.data})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,n){t.login=function(o,e){n.login(o,e).then(function(n){t.$emit("login",n)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,n){t.addPost=function(o){t.postBody&&n.create({username:o.username,body:t.postBody}).success(function(n){t.posts.unshift(n),t.postBody=null})},n.fetch().success(function(n){t.posts=n})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(n){return t.post("/api/posts",n)}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var n=this;n.getUser=function(){return t.get("/api/users")},n.login=function(o,e){return t.post("/api/sessions",{username:o,password:e}).then(function(o){return n.token=o.data,t.defaults.headers.common["X-Auth"]=o.data,n.getUser()})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJvdXRlcy5qcyIsInVzZXIuc3ZjLmpzIl0sIm5hbWVzIjpbImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJG9uIiwiXyIsInJlc3BvbnNlIiwiY3VycmVudFVzZXIiLCJkYXRhIiwiVXNlclN2YyIsImxvZ2luIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInRoZW4iLCJ1c2VyIiwiJGVtaXQiLCJQb3N0c1N2YyIsImFkZFBvc3QiLCJwb3N0Qm9keSIsImNyZWF0ZSIsImJvZHkiLCJzdWNjZXNzIiwicG9zdCIsInBvc3RzIiwidW5zaGlmdCIsImZldGNoIiwic2VydmljZSIsIiRodHRwIiwidGhpcyIsImdldCIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsInRlbXBsYXRlVXJsIiwic3ZjIiwiZ2V0VXNlciIsInZhbCIsInRva2VuIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIl0sIm1hcHBpbmdzIjoiQUFJQSxHQUFBQSxLQUFBQyxRQUFBQyxPQUFBLFNBRUFELFNBQUFDLE9BQUEsT0FBQSxZQ0hBRCxRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsbUJBQUEsU0FBQSxTQUFBQyxHQUNBQSxFQUFBQyxJQUFBLFFBQUEsU0FBQUMsRUFBQUMsR0FDQUgsRUFBQUksWUFBQUQsRUFBQUUsVUNIQVIsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGFBQUEsU0FBQSxVQUFBLFNBQUFDLEVBQUFNLEdBQ0FOLEVBQUFPLE1BQUEsU0FBQUMsRUFBQUMsR0FDQUgsRUFBQUMsTUFBQUMsRUFBQUMsR0FDQUMsS0FBQSxTQUFBQyxHQUNBWCxFQUFBWSxNQUFBLFFBQUFELFNDTEFkLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxhQUFBLFNBQUEsV0FBQSxTQUFBQyxFQUFBYSxHQUVBYixFQUFBYyxRQUFBLFNBQUFILEdBQ0FYLEVBQUFlLFVBQ0FGLEVBQUFHLFFBQ0FSLFNBQUFHLEVBQUFILFNBQ0FTLEtBQUFqQixFQUFBZSxXQUNBRyxRQUFBLFNBQUFDLEdBQ0FuQixFQUFBb0IsTUFBQUMsUUFBQUYsR0FDQW5CLEVBQUFlLFNBQUEsUUFLQUYsRUFBQVMsUUFBQUosUUFBQSxTQUFBRSxHQUNBcEIsRUFBQW9CLE1BQUFBLE9DaEJBdkIsUUFBQUMsT0FBQSxPQUNBeUIsUUFBQSxZQUFBLFFBQUEsU0FBQUMsR0FDQUMsS0FBQUgsTUFBQSxXQUNBLE1BQUFFLEdBQUFFLElBQUEsZUFFQUQsS0FBQVQsT0FBQSxTQUFBRyxHQUNBLE1BQUFLLEdBQUFMLEtBQUEsYUFBQUEsT0NMQXRCLFFBQUFDLE9BQUEsT0FDQTZCLFFBQUEsaUJBQUEsU0FBQUMsR0FDQUEsRUFDQUMsS0FBQSxLQUFBOUIsV0FBQSxZQUFBK0IsWUFBQSxlQUNBRCxLQUFBLGFBQUE5QixXQUFBLGVBQUErQixZQUFBLGtCQUNBRCxLQUFBLFVBQUE5QixXQUFBLFlBQUErQixZQUFBLGtCQ05BakMsUUFBQUMsT0FBQSxPQUNBeUIsUUFBQSxXQUFBLFFBQUEsU0FBQUMsR0FDQSxHQUFBTyxHQUFBTixJQUNBTSxHQUFBQyxRQUFBLFdBQ0EsTUFBQVIsR0FBQUUsSUFBQSxlQWVBSyxFQUFBeEIsTUFBQSxTQUFBQyxFQUFBQyxHQUNBLE1BQUFlLEdBQUFMLEtBQUEsaUJBQ0FYLFNBQUFBLEVBQUFDLFNBQUFBLElBQ0FDLEtBQUEsU0FBQXVCLEdBR0EsTUFGQUYsR0FBQUcsTUFBQUQsRUFBQTVCLEtBQ0FtQixFQUFBVyxTQUFBQyxRQUFBQyxPQUFBLFVBQUFKLEVBQUE1QixLQUNBMEIsRUFBQUMiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IGtyenlzenRvZiBvbiAyNi4wNC4xNi5cbiAqL1xuXG52YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtdKVxuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJywgWyduZ1JvdXRlJ10pIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGtyenlzenRvZiBvbiAyMS4wNS4xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJywgZnVuY3Rpb24gKCRzY29wZSkge1xuICAgICRzY29wZS4kb24oJ2xvZ2luJywgZnVuY3Rpb24gKF8sIHJlc3BvbnNlKSB7XG4gICAgICAgICRzY29wZS5jdXJyZW50VXNlciA9IHJlc3BvbnNlLmRhdGFcbiAgICB9KVxufSkiLCIvKipcbiAqIENyZWF0ZWQgYnkga3J6eXN6dG9mIG9uIDE0LjA1LjE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignTG9naW5DdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVXNlclN2Yykge1xuICAgICAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICBVc2VyU3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2xvZ2luJywgdXNlcilcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfSkiLCIvKipcbiAqIENyZWF0ZWQgYnkga3J6eXN6dG9mIG9uIDI2LjA0LjE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdQb3N0c0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBQb3N0c1N2Yykge1xuXG4gICAgJHNjb3BlLmFkZFBvc3QgPSBmdW5jdGlvbiAodXNlcikge1xuICAgICAgICBpZiAoJHNjb3BlLnBvc3RCb2R5KSB7XG4gICAgICAgICAgICBQb3N0c1N2Yy5jcmVhdGUoe1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VyLnVzZXJuYW1lLFxuICAgICAgICAgICAgICAgIGJvZHk6ICRzY29wZS5wb3N0Qm9keVxuICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbiAocG9zdCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5wb3N0cy51bnNoaWZ0KHBvc3QpXG4gICAgICAgICAgICAgICAgJHNjb3BlLnBvc3RCb2R5ID0gbnVsbFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIFBvc3RzU3ZjLmZldGNoKCkuc3VjY2VzcyhmdW5jdGlvbiAocG9zdHMpIHtcbiAgICAgICAgJHNjb3BlLnBvc3RzID0gcG9zdHNcblxuICAgIH0pXG5cbn0pXG4iLCIvKipcbiAqIENyZWF0ZWQgYnkga3J6eXN6dG9mIG9uIDI2LjA0LjE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdQb3N0c1N2YycsIGZ1bmN0aW9uICgkaHR0cCkge1xuICAgIHRoaXMuZmV0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMnKVxuICAgIH1cbiAgICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uIChwb3N0KSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJywgcG9zdClcbiAgICB9XG59KVxuXG4iLCIvKipcbiAqIENyZWF0ZWQgYnkga3J6eXN6dG9mIG9uIDE0LjA1LjE2LlxuICovXG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbmZpZyhmdW5jdGlvbiAoJHJvdXRlUHJvdmlkZXIpIHtcbiAgICAkcm91dGVQcm92aWRlclxuICAgICAgICAud2hlbignLycsIHsgY29udHJvbGxlcjogJ1Bvc3RzQ3RybCcsIHRlbXBsYXRlVXJsOiAncG9zdHMuaHRtbCd9KVxuICAgICAgICAud2hlbignL3JlZ2lzdGVyJywgeyBjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJywgdGVtcGxhdGVVcmw6ICdyZWdpc3Rlci5odG1sJ30pXG4gICAgICAgIC53aGVuKCcvbG9naW4nLCB7IGNvbnRyb2xsZXI6ICdMb2dpbkN0cmwnLCB0ZW1wbGF0ZVVybDogJ2xvZ2luLmh0bWwnfSlcbn0pIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGtyenlzenRvZiBvbiAxNC4wNS4xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLnNlcnZpY2UoJ1VzZXJTdmMnLCBmdW5jdGlvbiAoJGh0dHApIHtcbiAgICAgICAgdmFyIHN2YyA9IHRoaXNcbiAgICAgICAgc3ZjLmdldFVzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJylcbiAgICAgICAgICAgICAgICAvLyAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGFcbiAgICAgICAgICAgICAgICAvLyB9KVxuICAgICAgICB9XG4gICAgICAgIC8vIHN2Yy5sb2dpbiA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgLy8gICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zJywge1xuICAgICAgICAvLyAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6IHBhc3N3b3JkXG4gICAgICAgIC8vICAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgLy8gICAgICAgICBzdmMudG9rZW4gPSB2YWwuZGF0YVxuICAgICAgICAvLyAgICAgICAgIHJldHVybiBzdmMuZ2V0VXNlcigpXG4gICAgICAgIC8vICAgICB9KVxuICAgICAgICAvLyB9XG5cblxuICAgICAgICBzdmMubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgc3ZjLnRva2VuID0gdmFsLmRhdGFcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSB2YWwuZGF0YVxuICAgICAgICAgICAgICAgIHJldHVybiBzdmMuZ2V0VXNlcigpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIC8vIHN2Yy5yZWdpc3RlciA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgLy8gICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzJywge1xuICAgICAgICAvLyAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6IHBhc3N3b3JkXG4gICAgICAgIC8vICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gc3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZClcbiAgICAgICAgLy8gICAgIH0pXG4gICAgICAgIC8vIH1cbiAgICB9KSJdfQ==
